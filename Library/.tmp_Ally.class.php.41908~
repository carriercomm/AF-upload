<?php
// Class to manage invite information in My Offers Webpage
// Template: allies.tpl.php

require_once("OfferCP.class.php");
require_once('MailMessage.class.php');

class AllyForm extends QForm {

	protected $txtEmail;
	protected $txtFullName;
	protected $btnInvite;

	protected $htmlMailMessage;
	protected $strTemplate;
	protected $lblMessage;
	protected $lblBottom;
	protected $objUser;
	protected $objOffer;
	protected $btnDelButton;
	
	protected $objMessageArray;

	protected $txtAlly;

	protected $dtgAllies;

	protected $objMessage;
	protected $pnlAllyArray;


	protected function Form_Create() {

		$this->strTemplate = __TEMPLATES_MAIL__ . '/invite.html';

		$this->txtEmail = new EmailTextBox($this);
		$this->txtEmail->Required = true;
		$this->txtEmail->CssClass = "email";

		$this->txtFullName = new EmailTextBox($this);
		$this->txtFullName->Required = true;
		$this->txtFullName->CssClass = "name";

		$this->btnInvite = new QButton($this);
		$this->btnInvite->Text = QApplication::Translate('Invite');
		$this->btnInvite->AddAction(new QClickEvent(), new QAjaxAction('btnInvite_Click'));
		$this->btnInvite->PrimaryButton = true;
		$this->btnInvite->CssClass = 'alliesInvitebtn';

		$this->dtgAllies = new QDataGrid($this);
		$this->dtgAllies->CellPadding = 5;
		$this->dtgAllies->CellSpacing = 0;

		// Let's enable AJAX!!!
		$this->dtgAllies->UseAjax = true;

		// Enable Pagination, and set to 5 items per page
		$objPaginator = new QPaginator($this->dtgAllies);
		$this->dtgAllies->CssClass = 'datagrid_allies';
		$this->dtgAllies->Paginator = $objPaginator;
		$this->dtgAllies->ItemsPerPage = 10;

		$this->dtgAllies->AddColumn(new QDataGridColumn("Del", '<?= $_FORM->DeleteButton_Render($_ITEM) ?>', 'Width=10', 'HtmlEntities=false')); //add TF 11-27-08
		
		$this->dtgAllies->AddColumn(new QDataGridColumn('Ally', '<?= $_FORM->AllyColumn_Render($_ITEM) ?>', 'Width=180', 'HtmlEntities=false',
		array('OrderByClause' => QQ::OrderBy(QQN::User()->FullName), 'ReverseOrderByClause' => QQ::OrderBy(QQN::User()->FullName,false))));
		$this->dtgAllies->AddColumn(new QDataGridColumn('Ally Company', '<?= $_ITEM->AccountIdObject->Name ?>', 'Width=120',
		array('OrderByClause' => QQ::OrderBy(QQN::User()->AccountIdObject->Name), 'ReverseOrderByClause' => QQ::OrderBy(QQN::User()->AccountIdObject->Name,false))));
		$this->dtgAllies->AddColumn(new QDataGridColumn("Account You've Received", '<?=  ?>', 'Width=60'));
		$this->dtgAllies->AddColumn(new QDataGridColumn("Accounts You've Given", '<?= ?>', 'Width=60'));
		$this->dtgAllies->AddColumn(new QDataGridColumn("Recommended Request", '<?=  ?>', 'Width=120'));
		$this->dtgAllies->AddColumn(new QDataGridColumn("Recommended Give", '<?=  ?>', 'Width=120'));

		// Let's make sorting Ajax-ified
		$this->dtgAllies->UseAjax = true;

		// Let's pre-default the sorting by ticket (column index #2)
		$this->dtgAllies->SortColumnIndex = 1;
			
		// Make the DataGrid look nice
		/*
		$objStyle = $this->dtgAllies->RowStyle;
		$objStyle->FontSize = 12;
		$objStyle->BackColor = '#EEEEEE';

		$objStyle = $this->dtgAllies->AlternateRowStyle;
		$objStyle->BackColor = 'white';

		$objStyle = $this->dtgAllies->HeaderRowStyle;
		$objStyle->ForeColor = 'black';
		$objStyle->BackColor = 'white';
			
		$objStyle = $this->dtgAllies->HeaderLinkStyle;
		$objStyle->ForeColor = 'black';
        */
		
		$this->dtgAllies->SetDataBinder('dtgAllies_Bind', $this);
		
		$this->lblMessage = new QLabel($this);
		$this->lblMessage->Display = false;
		$this->lblMessage->CssClass = "AllyMessageInvite";

	}

	protected function ReadTemplate(){

		$handle = @fopen($this->strTemplate, "r");
		$template = @fread($handle, filesize($this->strTemplate));
		@fclose($handle);
		return($template);
	}

	protected function ApplyTemplate($template, $variablesArray){


		if (is_array($variablesArray)) {
			foreach ($variablesArray as $needle=>$data) {
				$template = str_replace("{".$needle."}",$data,$template);
			}
		}


		return ($template);
	}

	protected function btnInvite_Click($strFormId, $strControlId, $strParameter) {

		$this->lblMessage->Display = False;
		
		if(!$this->txtEmail->Validate())
		{
			$this->txtEmail->Text = "";
			return;
		}

		
		$objUser = unserialize($_SESSION['User']);

/* initialize adding to iContact */

		  $api = new IcApi("http://api.icontact.com/icp");
		  $api->setVersion("1.0");
		  $api->setKey("xKmv8x9A72RvAFI1tEcFkbDqMEBjQSne");
		  $api->setSecret("tzzsXySUrAgR6PIpjLUuMoLpTcyzVMDe");
		  $api->setLogin("timfong888");
		  $api->setPassword("4417348");
		  $api->setDebug(false);

/* create link to store in icontact*/
		  
		  $codename = $objUser->UserDetail->CodeName;
		  $referral = $objUser->Id;
		  $domain = (__DOMAIN__);
		  $inviter = $objUser->FullName;
		  
		 //check if a reseller or not
		 $reseller = $objUser->UserDetail->Reseller;
		  
		 // Create a new contact and verify the contact
		 $new_contact = new IcResource_Contact();
		 $new_contact->newContact($this->txtEmail->Text,$this->txtFullName->Text,$codename,$referral,'-' ,'-',$domain,$inviter);
		 $response = $api->put($new_contact);
		 $new_contact->setXml($response->getXml());  // Populate $new_contact with the response from the API
		 // $api->follow($new_contact,'contact',1);     // Follow the link to the new contact to verify it
		  
		  // Subscribes the new contact to a list
		 $new_contact->newSubscription(30186,'subscribed');
		 $new_contact->putSubscription();
		 $response = $api->put($new_contact);

/* end of added code TF 2-9-09 */
		  
		$this->objMessage =  new MailMessage();
			
		/* Mail Variables to use un template __TEMPLATES_MAIL__ . '/invite.html'*/
		/* Ally: Ally invited*/
		/* User: User whom invite ally*/
		/* Link: link to signup */
		
		$variablesArray['ally']=$this->txtFullName->Text;
		$variablesArray['user']= $objUser->FullName;
		$variablesArray['link']= (__DOMAIN__) . '/signup_invite.php?manager=n&reseller=' .$reseller. '&username=' . $objUser->UserDetail->CodeName . '&referral=' . $objUser->Id . '&fname=' . $this->txtFullName->Text . '&email=' . $this->txtEmail->Text;
		
		/* Offers: some offers */

		if(!$this->objMessageArray)
		{ 
			$this->lblBottom = new QLabel($this);
			$this->lblBottom->HtmlEntities = false;
			
		$this->lblBottom->Text.= 'Some accounts available to you from ' . $objUser->FullName . ' include:';

		$objOfferArray = Offer::LoadArrayByUserOwnerId($objUser->Id,
			QQ::Clause(
						QQ::OrderBy(QQN::Offer()->Account->Name),
						QQ::LimitInfo(5)
			));		

		$this->lblBottom->Text.= '<ul>';

		foreach($objOfferArray as $objOffer){
			$this->lblBottom->Text.= '<li>' . $objOffer->Account->Name.'</li>';
		}
		
		$this->lblBottom->Text.= '</ul>';
	
		$variablesArray['offers']= $this->lblBottom->Text; 
		} 	
		
		/* End Mail Variables */

		$this->objMessage->ReadTemplate($this->strTemplate);
		$this->objMessage->HtmlBody = $this->objMessage->ApplyVariablesToTemplate($variablesArray);
		
		/*$this->objMessage->From = 'Allyforce ' . QApplication::Translate('Invite') .'<noreply@allyforce.com>';*/
		$this->objMessage->From = $objUser->FullName .'<noreply@allyforce.com>';
		$this->objMessage->To = $this->txtEmail->Text;
		
		/* the subject changes depending on whether the sender is a Reseller or not */
		if ($reseller = "Y") {
			$this->objMessage->Subject = $objUser->FullName . ' can sell your solution into new accounts...!';
		} else {
			$this->objMessage->Subject = $objUser->FullName . ' wants to share leads with you!';
		}

		QEmailServer::Send($this->objMessage);
		
		$this->lblMessage->Text ="Your invite was sent sucessfully to " . $this->txtFullName->Text;
		$this->lblMessage->Display = True;
		return true;
	}


	public function dtgAllies_Bind(){

		$objUser = unserialize($_SESSION['User']);
		
		$this->dtgAllies->DataSource =   $objUser->GetUserAsAlliesArray(QQ::Clause($this->dtgAllies->OrderByClause,$this->dtgAllies->LimitClause));
			
		$this->dtgAllies->TotalItemCount = User::CountByUserAsAllies($objUser->Id);

	}
	
	public function AllyColumn_Render(User $objUser) {
			
		$strReturn = "";
		
		if($objUser->UserDetail->Picture != '')
			$strReturn.= '<img width=28 height=28 border="0" align="absmiddle" alt="" src="' . __SUBDIRECTORY__. '/Pictures/' . $objUser->UserDetail->Picture. '"/>'; 
			
		$strReturn.= '<a href="' . __SUBDIRECTORY__ . '/AllyProfile.php?aid=' . $objUser->Id . '">' . $objUser->FullName . '</a>';
		
		return $strReturn;
	}
	public function DeleteButton_Render(User $objUser) {
		$this->btnDelButton = new QImageButton($this->dtgAllies);
		$this->btnDelButton->ImageUrl="images/x_red.gif";
		$this->btnDelButton->SetCustomStyle('cursor','pointer');
		$this->btnDelButton->AddAction(new QClickEvent(),new QConfirmAction('Are you sure???'));
		$this->btnDelButton->AddAction(new QClickEvent(),new QAjaxAction('deleteAlly'));
		$this->btnDelButton->ActionParameter = $objUser->Id;
		
		return $this->btnDelButton->Render(false);
	}
	
	protected function deleteAlly($strFormId, $strControlId, $strParameter) {
		$objUser = unserialize($_SESSION['User']);
		$ally = UserGen::Load($strParameter);
		$objUser->UnassociateParentUserAsAllies($ally);
		$objUser->UnassociateUserAsAllies($ally);	
		$this->dtgAllies->Refresh();
	}
}
?>